generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Specific user roles
  student  Student?
  lecturer Lecturer?
}

model Lecturer {
  id          String       @id @default(uuid())
  userId      String       @unique
  user        User         @relation(fields: [userId], references: [id])
  nominations Nomination[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  supervisor  Supervisor?
  examiner    Examiner?
}

// Student-specific data
model Student {
  id           String       @id @default(uuid())
  userId       String       @unique
  user         User         @relation(fields: [userId], references: [id])
  submissions  Submission[]
  supervisor   Supervisor?  @relation(fields: [supervisorId], references: [id])
  project      Project?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Viva         Viva?
  supervisorId String?
}

// Supervisor-specific data
model Supervisor {
  id         String    @id @default(uuid())
  lecturerId String    @unique
  lecturer   Lecturer  @relation(fields: [lecturerId], references: [id])
  students   Student[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

// Examiner-specific data
model Examiner {
  id         String   @id @default(uuid())
  lecturerId String   @unique
  lecturer   Lecturer @relation(fields: [lecturerId], references: [id])
  vivas      Viva[]   @relation("vivasParticipated")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Submission {
  id        String   @id @default(uuid())
  title     String // Title of the submission
  content   String // URL to the submission
  feedback  String? // Feedback from the examiner
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Viva {
  id           String       @id @default(uuid())
  topic        String
  studentId    String       @unique
  student      Student      @relation(fields: [studentId], references: [id])
  vivaDate     DateTime?
  evaluation   String?
  examiners    Examiner[]   @relation("vivasParticipated")
  nominations  Nomination[] @relation("nominations")
  project      Project?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  nominationId String?
  Nomination   Nomination[]
}

model Project {
  id        String   @id @default(uuid())
  title     String
  studentId String   @unique
  student   Student  @relation(fields: [studentId], references: [id])
  vivaId    String   @unique
  viva      Viva     @relation(fields: [vivaId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Nomination {
  id         String   @id @default(uuid())
  details    String
  lecturerId String
  accepted   Boolean  @default(false)
  lecturer   Lecturer @relation(fields: [lecturerId], references: [id])
  vivas      Viva[]   @relation("nominations")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  Viva       Viva?    @relation(fields: [vivaId], references: [id])
  vivaId     String?
}
